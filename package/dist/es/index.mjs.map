{"version":3,"file":"index.mjs","sources":["../../src/index.ts"],"sourcesContent":["import type { CookieOptions } from \"hono/utils/cookie\";\r\n\r\nimport { Hono } from \"hono\";\r\nimport { setCookie } from \"hono/cookie\";\r\nimport { GitHub, generateState } from \"arctic\";\r\n\r\nimport { authQueryValidator } from \"@/validators/auth-validator\";\r\nimport { callbackQueryValidator, callbackCookieValidator } from \"@/validators/callback-validator\";\r\n\r\nimport { generateOAuthCallbackHTML } from \"@/lib/generate-oauth-callback-html\";\r\n\r\nconst DEFAULT_COOKIE_OPTIONS: CookieOptions = {\r\n  path: \"/\",\r\n  httpOnly: true,\r\n  secure: true,\r\n  maxAge: 10 * 60, // 10 minutes\r\n  sameSite: \"Lax\",\r\n};\r\n\r\nexport type CreateAuthAppProps = {\r\n  provider: {\r\n    github: {\r\n      clientId: string;\r\n      clientSecret: string;\r\n    };\r\n  };\r\n  options?: {\r\n    allowedDomains?: string;\r\n  };\r\n};\r\n\r\nexport const createAuthApp = ({ provider, options }: CreateAuthAppProps): Hono => {\r\n  const { github: githubCredentials } = provider;\r\n  const { allowedDomains } = options ?? {};\r\n\r\n  const app = new Hono();\r\n  const github = new GitHub(githubCredentials.clientId, githubCredentials.clientSecret, null);\r\n\r\n  app.get(\"/auth\", authQueryValidator(allowedDomains), (c) => {\r\n    const { provider, scope } = c.req.valid(\"query\");\r\n    const state = generateState();\r\n    const authURL = github.createAuthorizationURL(state, scope.split(\",\"));\r\n\r\n    setCookie(c, \"auth_state\", state, DEFAULT_COOKIE_OPTIONS);\r\n    setCookie(c, \"provider\", provider, DEFAULT_COOKIE_OPTIONS);\r\n\r\n    return c.redirect(authURL.href);\r\n  });\r\n\r\n  app.get(\"/callback\", callbackQueryValidator, callbackCookieValidator, async (c) => {\r\n    const { code } = c.req.valid(\"query\");\r\n    const { provider } = c.req.valid(\"cookie\");\r\n    const tokens = await github.validateAuthorizationCode(code);\r\n    const accessToken = tokens.accessToken();\r\n\r\n    return generateOAuthCallbackHTML({ c, provider, token: accessToken });\r\n  });\r\n\r\n  return app;\r\n};\r\n"],"names":["DEFAULT_COOKIE_OPTIONS","createAuthApp","provider","options","githubCredentials","allowedDomains","app","Hono","github","GitHub","authQueryValidator","c","scope","state","generateState","authURL","setCookie","callbackQueryValidator","callbackCookieValidator","code","accessToken","generateOAuthCallbackHTML"],"mappings":";;;;;;;;;;;;AAWA,MAAMA,IAAwC;AAAA,EAC5C,MAAM;AAAA,EACN,UAAU;AAAA,EACV,QAAQ;AAAA,EACR,QAAQ,KAAK;AAAA;AAAA,EACb,UAAU;AACZ,GAcaC,IAAgB,CAAC,EAAE,UAAAC,GAAU,SAAAC,QAAwC;AAC1E,QAAA,EAAE,QAAQC,EAAA,IAAsBF,GAChC,EAAE,gBAAAG,MAAmBF,KAAW,CAAC,GAEjCG,IAAM,IAAIC,EAAK,GACfC,IAAS,IAAIC,EAAOL,EAAkB,UAAUA,EAAkB,cAAc,IAAI;AAE1F,SAAAE,EAAI,IAAI,SAASI,EAAmBL,CAAc,GAAG,CAACM,MAAM;AACpD,UAAA,EAAE,UAAAT,GAAU,OAAAU,EAAA,IAAUD,EAAE,IAAI,MAAM,OAAO,GACzCE,IAAQC,EAAc,GACtBC,IAAUP,EAAO,uBAAuBK,GAAOD,EAAM,MAAM,GAAG,CAAC;AAE3D,WAAAI,EAAAL,GAAG,cAAcE,GAAOb,CAAsB,GAC9CgB,EAAAL,GAAG,YAAYT,GAAUF,CAAsB,GAElDW,EAAE,SAASI,EAAQ,IAAI;AAAA,EAAA,CAC/B,GAEDT,EAAI,IAAI,aAAaW,GAAwBC,GAAyB,OAAOP,MAAM;AACjF,UAAM,EAAE,MAAAQ,EAAK,IAAIR,EAAE,IAAI,MAAM,OAAO,GAC9B,EAAE,UAAAT,MAAaS,EAAE,IAAI,MAAM,QAAQ,GAEnCS,KADS,MAAMZ,EAAO,0BAA0BW,CAAI,GAC/B,YAAY;AAEvC,WAAOE,EAA0B,EAAE,GAAAV,GAAG,UAAAT,GAAU,OAAOkB,GAAa;AAAA,EAAA,CACrE,GAEMd;AACT;"}