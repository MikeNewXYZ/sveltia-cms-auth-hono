{"version":3,"file":"index.cjs","sources":["../../src/index.ts"],"sourcesContent":["import type { CookieOptions } from \"hono/utils/cookie\";\r\n\r\nimport { Hono } from \"hono\";\r\nimport { setCookie } from \"hono/cookie\";\r\nimport { GitHub, generateState } from \"arctic\";\r\n\r\nimport { authQueryValidator } from \"@/validators/auth-validator\";\r\nimport { callbackQueryValidator, callbackCookieValidator } from \"@/validators/callback-validator\";\r\n\r\nimport { generateOAuthCallbackHTML } from \"@/lib/generate-oauth-callback-html\";\r\n\r\nconst DEFAULT_COOKIE_OPTIONS: CookieOptions = {\r\n  path: \"/\",\r\n  httpOnly: true,\r\n  secure: true,\r\n  maxAge: 10 * 60, // 10 minutes\r\n  sameSite: \"Lax\",\r\n};\r\n\r\nexport type CreateAuthAppProps = {\r\n  provider: {\r\n    github: {\r\n      clientId: string;\r\n      clientSecret: string;\r\n    };\r\n  };\r\n  options?: {\r\n    allowedDomains?: string;\r\n  };\r\n};\r\n\r\nexport const createAuthApp = ({ provider, options }: CreateAuthAppProps): Hono => {\r\n  const { github: githubCredentials } = provider;\r\n  const { allowedDomains } = options ?? {};\r\n\r\n  const app = new Hono();\r\n  const github = new GitHub(githubCredentials.clientId, githubCredentials.clientSecret, null);\r\n\r\n  app.get(\"/auth\", authQueryValidator(allowedDomains), (c) => {\r\n    const { provider, scope } = c.req.valid(\"query\");\r\n    const state = generateState();\r\n    const authURL = github.createAuthorizationURL(state, scope.split(\",\"));\r\n\r\n    setCookie(c, \"auth_state\", state, DEFAULT_COOKIE_OPTIONS);\r\n    setCookie(c, \"provider\", provider, DEFAULT_COOKIE_OPTIONS);\r\n\r\n    return c.redirect(authURL.href);\r\n  });\r\n\r\n  app.get(\"/callback\", callbackQueryValidator, callbackCookieValidator, async (c) => {\r\n    const { code } = c.req.valid(\"query\");\r\n    const { provider } = c.req.valid(\"cookie\");\r\n    const tokens = await github.validateAuthorizationCode(code);\r\n    const accessToken = tokens.accessToken();\r\n\r\n    return generateOAuthCallbackHTML({ c, provider, token: accessToken });\r\n  });\r\n\r\n  return app;\r\n};\r\n"],"names":["DEFAULT_COOKIE_OPTIONS","createAuthApp","provider","options","githubCredentials","allowedDomains","app","Hono","github","GitHub","authQueryValidator","c","scope","state","generateState","authURL","setCookie","callbackQueryValidator","callbackCookieValidator","code","accessToken","generateOAuthCallbackHTML"],"mappings":"qhCAWMA,EAAwC,CAC5C,KAAM,IACN,SAAU,GACV,OAAQ,GACR,OAAQ,GAAK,GACb,SAAU,KACZ,EAcaC,EAAgB,CAAC,CAAE,SAAAC,EAAU,QAAAC,KAAwC,CAC1E,KAAA,CAAE,OAAQC,CAAA,EAAsBF,EAChC,CAAE,eAAAG,GAAmBF,GAAW,CAAC,EAEjCG,EAAM,IAAIC,OACVC,EAAS,IAAIC,SAAOL,EAAkB,SAAUA,EAAkB,aAAc,IAAI,EAE1F,OAAAE,EAAI,IAAI,QAASI,EAAA,mBAAmBL,CAAc,EAAIM,GAAM,CACpD,KAAA,CAAE,SAAAT,EAAU,MAAAU,CAAA,EAAUD,EAAE,IAAI,MAAM,OAAO,EACzCE,EAAQC,EAAAA,cAAc,EACtBC,EAAUP,EAAO,uBAAuBK,EAAOD,EAAM,MAAM,GAAG,CAAC,EAE3DI,OAAAA,EAAAA,UAAAL,EAAG,aAAcE,EAAOb,CAAsB,EAC9CgB,EAAAA,UAAAL,EAAG,WAAYT,EAAUF,CAAsB,EAElDW,EAAE,SAASI,EAAQ,IAAI,CAAA,CAC/B,EAEDT,EAAI,IAAI,YAAaW,EAAwB,uBAAAC,EAAA,wBAAyB,MAAOP,GAAM,CACjF,KAAM,CAAE,KAAAQ,CAAK,EAAIR,EAAE,IAAI,MAAM,OAAO,EAC9B,CAAE,SAAAT,GAAaS,EAAE,IAAI,MAAM,QAAQ,EAEnCS,GADS,MAAMZ,EAAO,0BAA0BW,CAAI,GAC/B,YAAY,EAEvC,OAAOE,EAAAA,0BAA0B,CAAE,EAAAV,EAAG,SAAAT,EAAU,MAAOkB,EAAa,CAAA,CACrE,EAEMd,CACT"}